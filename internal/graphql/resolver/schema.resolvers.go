package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/neogan74/konsul/internal/graphql/generated"
	"github.com/neogan74/konsul/internal/graphql/model"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.SystemHealth, error) {
	panic(fmt.Errorf("not implemented: Health - health"))
}

// Kv is the resolver for the kv field.
func (r *queryResolver) Kv(ctx context.Context, key string) (*model.KVPair, error) {
	panic(fmt.Errorf("not implemented: Kv - kv"))
}

// KvList is the resolver for the kvList field.
func (r *queryResolver) KvList(ctx context.Context, prefix *string, limit *int, offset *int) (*model.KVListResponse, error) {
	panic(fmt.Errorf("not implemented: KvList - kvList"))
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, name string) (*model.Service, error) {
	panic(fmt.Errorf("not implemented: Service - service"))
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context, limit *int, offset *int) ([]*model.Service, error) {
	panic(fmt.Errorf("not implemented: Services - services"))
}

// ServicesCount is the resolver for the servicesCount field.
func (r *queryResolver) ServicesCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: ServicesCount - servicesCount"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
