// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

// Health check definition
type HealthCheck struct {
	// Check ID
	ID string `json:"id"`
	// Service ID this check belongs to
	ServiceID string `json:"serviceId"`
	// Check name
	Name string `json:"name"`
	// Check type (http, tcp, grpc, ttl)
	Type HealthCheckType `json:"type"`
	// Current status
	Status HealthCheckStatus `json:"status"`
	// Status output/message
	Output *string `json:"output,omitempty"`
	// Check interval
	Interval *time.Duration `json:"interval,omitempty"`
	// Check timeout
	Timeout *time.Duration `json:"timeout,omitempty"`
	// Last check time
	LastChecked *time.Time `json:"lastChecked,omitempty"`
}

// Response type for listing KV pairs
type KVListResponse struct {
	// List of key-value pairs
	Items []*KVPair `json:"items"`
	// Total count of items (useful for pagination)
	Total int `json:"total"`
	// Whether there are more items available
	HasMore bool `json:"hasMore"`
}

// KVPair represents a key-value pair in the KV store
type KVPair struct {
	// The key
	Key string `json:"key"`
	// The value
	Value string `json:"value"`
	// Creation timestamp
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Last modification timestamp
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// KV store statistics
type KVStats struct {
	// Total number of keys
	TotalKeys int `json:"totalKeys"`
}

type Query struct {
}

// Service represents a registered service in the service registry
type Service struct {
	// Service name (unique identifier)
	Name string `json:"name"`
	// Service IP address or hostname
	Address string `json:"address"`
	// Service port number
	Port int `json:"port"`
	// Service status
	Status ServiceStatus `json:"status"`
	// Expiration timestamp
	ExpiresAt time.Time `json:"expiresAt"`
	// Health checks associated with this service
	Checks []*HealthCheck `json:"checks"`
}

// Service statistics
type ServiceStats struct {
	// Total registered services
	Total int `json:"total"`
	// Active (non-expired) services
	Active int `json:"active"`
	// Expired services
	Expired int `json:"expired"`
}

// System health information
type SystemHealth struct {
	// Overall system status
	Status string `json:"status"`
	// Konsul version
	Version string `json:"version"`
	// System uptime
	Uptime string `json:"uptime"`
	// Current timestamp
	Timestamp time.Time `json:"timestamp"`
	// Service statistics
	Services *ServiceStats `json:"services"`
	// KV store statistics
	KvStore *KVStats `json:"kvStore"`
}

// Health check status
type HealthCheckStatus string

const (
	HealthCheckStatusPassing  HealthCheckStatus = "PASSING"
	HealthCheckStatusWarning  HealthCheckStatus = "WARNING"
	HealthCheckStatusCritical HealthCheckStatus = "CRITICAL"
)

var AllHealthCheckStatus = []HealthCheckStatus{
	HealthCheckStatusPassing,
	HealthCheckStatusWarning,
	HealthCheckStatusCritical,
}

func (e HealthCheckStatus) IsValid() bool {
	switch e {
	case HealthCheckStatusPassing, HealthCheckStatusWarning, HealthCheckStatusCritical:
		return true
	}
	return false
}

func (e HealthCheckStatus) String() string {
	return string(e)
}

func (e *HealthCheckStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthCheckStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthCheckStatus", str)
	}
	return nil
}

func (e HealthCheckStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *HealthCheckStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e HealthCheckStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Health check type
type HealthCheckType string

const (
	HealthCheckTypeHTTP HealthCheckType = "HTTP"
	HealthCheckTypeTCP  HealthCheckType = "TCP"
	HealthCheckTypeGrpc HealthCheckType = "GRPC"
	HealthCheckTypeTTL  HealthCheckType = "TTL"
)

var AllHealthCheckType = []HealthCheckType{
	HealthCheckTypeHTTP,
	HealthCheckTypeTCP,
	HealthCheckTypeGrpc,
	HealthCheckTypeTTL,
}

func (e HealthCheckType) IsValid() bool {
	switch e {
	case HealthCheckTypeHTTP, HealthCheckTypeTCP, HealthCheckTypeGrpc, HealthCheckTypeTTL:
		return true
	}
	return false
}

func (e HealthCheckType) String() string {
	return string(e)
}

func (e *HealthCheckType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthCheckType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthCheckType", str)
	}
	return nil
}

func (e HealthCheckType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *HealthCheckType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e HealthCheckType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Service status enum
type ServiceStatus string

const (
	// Service is active and not expired
	ServiceStatusActive ServiceStatus = "ACTIVE"
	// Service has expired
	ServiceStatusExpired ServiceStatus = "EXPIRED"
)

var AllServiceStatus = []ServiceStatus{
	ServiceStatusActive,
	ServiceStatusExpired,
}

func (e ServiceStatus) IsValid() bool {
	switch e {
	case ServiceStatusActive, ServiceStatusExpired:
		return true
	}
	return false
}

func (e ServiceStatus) String() string {
	return string(e)
}

func (e *ServiceStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceStatus", str)
	}
	return nil
}

func (e ServiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ServiceStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ServiceStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
